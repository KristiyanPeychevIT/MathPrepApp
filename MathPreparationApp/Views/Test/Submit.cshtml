@using static MathPreparationApp.Common.GeneralApplicationConstants
@model FeedbackViewModel

@{
    ViewBag.Title = "Test Feedback";
    Layout = "_TestLayout";
}

<div class="card">
    <div class="row submit" style="text-align: center">
        <div class="col-md-4">
            <div class="feedback-container d-flex justify-content-center align-items-center">
                @if (Model.Score >= TestSuccessScore)
                {
                    <h2 class="">Поздравления, ти успя!</h2>
                }
                else
                {
                    <h2 class="">За съжаление, не се справи.</h2>
                }
            </div>
        </div>
        <div class="col-md-4">
            <div class="feedback-container d-flex justify-content-center align-items-center">
                <h2 class="">Резултатът ти е: @Model.Score%</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="feedback-container d-flex justify-content-center align-items-center">
                <button class="btn btn-primary" onclick="window.location.href = '@Url.Action("Create", "Test")'">Създай нов тест</button>
            </div>
        </div>
    </div>
    <div class="question-container">
        <div class="pagination" style="margin-top: 30px">
            <!-- Pagination buttons dynamically generated -->
            @for (int i = 0; i < Model.Questions.Count(); i++)
            {
                var buttonClass = "pagination-button";
                var questionId = Model.Questions.ToArray()[i].Id;
                if (Model.SelectedOptions.ContainsKey(Guid.Parse(questionId)))
                {
                    var selectedOptionIndex = Model.SelectedOptions[Guid.Parse(questionId)];

                    string selectedOption;

                    switch (selectedOptionIndex)
                    {
                        case 0:
                            selectedOption = Model.Questions.ToArray()[i].Option1;
                            break;
                        case 1:
                            selectedOption = Model.Questions.ToArray()[i].Option2;
                            break;
                        case 2:
                            selectedOption = Model.Questions.ToArray()[i].Option3;
                            break;
                        case 3:
                            selectedOption = Model.Questions.ToArray()[i].Option4;
                            break;
                        default:
                            selectedOption = "Invalid Option";
                            break;
                    }
                    buttonClass += selectedOption == Model.Questions.ToArray()[i].CorrectOption ? " correct" : " incorrect";
                }
                <button type="button" class="@buttonClass" data-question-index="@i">@Html.Raw(i + 1)</button>
            }
        </div>
        <div class="row mt-3">
            <div class="col-md-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="question-number">
                        <p style="font-size: 35px; margin-bottom: 0;">Въпрос 1/@Model.Questions.Count()</p>
                    </div>
                </div>
                <hr class="solid">
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-md-6">
                <div class="question">
                    <p style="font-size: 20px;">@Model.Questions.First().Name</p>
                    <hr class="solid">
                    <div class="options fw-bold d-flex align-items-center" style="margin-top: 20px; margin-bottom: 50px">
                        <div class="custom-checkbox mr-3">
                            <input type="checkbox" checked disabled>
                            <label for="correct-option" class="checkbox-label"></label>
                        </div>
                        <div class="correct-option" style="font-size: 20px">@Model.Questions.First().CorrectOption</div>
                    </div>
                    <div class="question-submit-image-container" style="margin-bottom: 40px;">
                        @if (Model.Questions.ToArray()[0].ImageBytes != null)
                        {
                            <img class="question-image img-fluid" src="data:image/jpeg;base64,@Convert.ToBase64String(Model.Questions.ToArray()[0].ImageBytes)" alt="Question Image">
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="explanation-title">
                    <p>Обяснение</p>
                </div>
                <hr class="solid">
                <div class="explanation-text" style="margin-top: 20px;">
                    <p>@Html.Raw(Model.Questions.First().Solution)</p>
                </div>
            </div>
        </div>
        <div class="navigation-arrows mt-3">
            <button type="button" id="prev-question">&larr; Предишен</button>
            <button type="button" id="next-question">Следващ &rarr;</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const feedbackModel = @Json.Serialize(Model);

        document.addEventListener("DOMContentLoaded", function () {
            const paginationButtons = document.querySelectorAll(".pagination-button");
            const questionContainer = document.querySelector(".question");
            const questionNameElement = questionContainer.querySelector("p");
            const optionsListElement = questionContainer.querySelector(".correct-option");
            const questionNumberElement = document.querySelector(".question-number p");
            const explanationTextElement = document.querySelector(".explanation-text p");
            const explanationTitleElement = document.querySelector(".explanation-title");
            const explanationHrElement = document.querySelector(".explanation-hr");
            const previousQuestionButton = document.querySelector("#prev-question");
            const nextQuestionButton = document.querySelector("#next-question");
            const questionImageContainer = document.querySelector(".question-submit-image-container");

            let btnIndex = 0; // Start with the first question

            function updateQuestion(index) {
                let questionData = feedbackModel.questions[index];

                // Update question name
                questionNameElement.textContent = questionData.name;

                // Update correct option
                optionsListElement.innerHTML = '';
                let answer = document.createElement("div");

                answer.append(" " + questionData.correctOption);
                optionsListElement.appendChild(answer);

                // Update question number
                questionNumberElement.textContent = "Въпрос " + (index + 1) + "/" + feedbackModel.questions.length;

                // Update explanation text
                explanationTextElement.innerHTML = questionData.solution;

                // Update question image
                questionImageContainer.innerHTML = ''; // Clear existing image
                if (questionData.imageBytes) {
                    const img = document.createElement("img");
                    img.className = "question-image img-fluid";
                    img.alt = "Question Image";
                    img.src = "data:image/jpeg;base64," + questionData.imageBytes;
                    questionImageContainer.appendChild(img);
                }

                toggleSelectedClass(index);
            }

            paginationButtons.forEach(button => {
                button.addEventListener("click", function () {
                    btnIndex = parseInt(button.getAttribute('data-question-index'));
                    updateQuestion(btnIndex);
                });
            });

            previousQuestionButton.addEventListener("click", function () {
                if (btnIndex > 0) {
                    btnIndex--;
                    updateQuestion(btnIndex);
                }
            });

            nextQuestionButton.addEventListener("click", function () {
                if (btnIndex < feedbackModel.questions.length - 1) {
                    btnIndex++;
                    updateQuestion(btnIndex);
                }
            });

            // Initialize with the first question on page load
            updateQuestion(0);
        });
    </script>
}