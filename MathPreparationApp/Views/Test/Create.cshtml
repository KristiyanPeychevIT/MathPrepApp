@using MathPreparationApp.Data.Models;
@using MathPreparationApp.Web.Infrastructure.Extensions
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using MathPreparationApp.Web.ViewModels.Question.Enums
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@model TestFormModel

@{
    ViewBag.Title = "Create Test";
    Layout = "_TestLayout";
}

<form method="post">
    <div class="card">
        <div class="row">
            <div class="col-md-6">
                <select asp-for="SubjectId" class="input-control" id="subjectsDropdown">
                    <option value="">Избери раздел</option>
                    @foreach (var subject in Model.Subjects)
                    {
                        <option value="@subject.Id">@subject.Name</option>
                    }
                </select>
                <span asp-validation-for="SubjectId" class="text-danger"></span>
            </div>
            <div class="col-md-6">
                <select asp-for="TopicId" class="input-control" id="topicsDropdown" disabled>
                    <option value="0">Избери подраздел</option>
                </select>
                <span asp-validation-for="TopicId" class="text-danger"></span>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
            <label class="input-control">Каква категория въпроси да бъдат включени?</label>
            </div>
            <div class="col-md-6">
                <select asp-for="CategoryOfQuestion" class="input-control">
                    <option value="0">Всички</option>
                    <option value="1">Неотговаряни преди</option>
                    <option value="2">Никога отговаряни правилно</option>
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
            <label asp-for="NumberOfQuestions" class="input-control">Брой въпроси:</label>
            </div>
            <div class="col-md-5">
                <input asp-for="NumberOfQuestions" class="input-control" id="numberOfQuestionsInput" value="" min="1" placeholder="Enter the number of questions to answer">
            </div>
            <div class="col-md-1">
                <span id="maxQuestionsSpan"></span>
            </div>

        </div>
        @*<input type="hidden" asp-for="ShowAnswers" />
        <div class="form-input">
            <label>Show answers:</label>
            <nav class="input-control" id="navigation1">    
                <a href="#" data-handler="AfterTest" class="button-nav" data-value="0">After Test</a>
                <a href="#" data-handler="AfterChoice" class="button-nav" data-value="1">After Choice</a>
                <a href="#" data-handler="BeforeChoice" class="button-nav" data-value="2">Before Choice</a>
            </nav>
        </div>*@
        <div class="row">
            <input type="hidden" asp-for="SortQuestions"/>
            <div class="col-md-6">
            <label class="input-control">Подреди въпросите:</label>
            </div>
            <div class="col-md-6">
                <nav class="input-control" id="navigation2">
                    <a href="#" data-handler="Randomly" class="button-nav" data-value="0">На случаен принцип</a>
                    <a href="#" data-handler="NewestFirst" class="button-nav" data-value="1">Първо най-новите</a>
                    <a href="#" data-handler="OldestFirst" class="button-nav" data-value="2">Първо най-старите</a>
                </nav>
            </div>
        </div>
        <div class="form-input">
            <button type="submit" class="btn btn-success" id="submitButton">Започни тест</button>
        </div>
    </div>
</form>



@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.getElementById("subjectsDropdown").addEventListener("change", function () {
            var subjectId = this.value;
            var topicsDropdown = document.getElementById("topicsDropdown");

            
            // Make AJAX request to fetch topics
            fetch(`../../../Question/OnGetTopics?subjectId=${subjectId}`)
                .then(response => response.json())
                .then(topics => {
                    // Clear existing options
                    topicsDropdown.innerHTML = "";

                    topicsDropdown.innerHTML = "<option value='0'>Избери подраздел</option>";

                    // Add "All" option
                    topicsDropdown.innerHTML += "<option value='0'>Всички</option>";

                    // Populate topics dropdown with topics by the subject
                    topics.forEach(topic => {
                        var option = document.createElement("option");
                        option.text = topic.name;
                        option.value = topic.id;
                        topicsDropdown.appendChild(option);
                    });

                    // Enable topics dropdown
                    topicsDropdown.disabled = false;
                    topicsDropdown.style.cursor = "pointer";
                });
            
        });

        document.getElementById("topicsDropdown").addEventListener("change", function () {
            // Set cursor style to not-allowed when the dropdown is disabled
            this.style.cursor = this.disabled ? "not-allowed" : "pointer";
        });

        var initialTopicsDropdown = document.getElementById("topicsDropdown");
        initialTopicsDropdown.style.cursor = initialTopicsDropdown.disabled ? "not-allowed" : "pointer";
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            //const buttons1 = document.querySelectorAll("#navigation1 .button-nav");
            const buttons2 = document.querySelectorAll("#navigation2 .button-nav");

            //buttons1.forEach(button => {
            //    button.addEventListener("click", function (event) {
            //        event.preventDefault(); // Prevent default link behavior

            //        document.querySelector('input[name="ShowAnswers"]').value = button.getAttribute('data-value');
            //        handleButtonClick(button);
            //    });
            //});

            buttons2.forEach(button => {
                button.addEventListener("click", function (event) {
                    event.preventDefault(); // Prevent default link behavior

                    document.querySelector('input[name="SortQuestions"]').value = button.getAttribute('data-value');
                    handleButtonClick(button);
                });
            });

            function handleButtonClick(button) {
                const buttons = button.parentElement.querySelectorAll(".button-nav");

                // Remove "selected" class from all buttons in the same navigation tag
                buttons.forEach(btn => {
                    btn.classList.remove("selected");
                });

                // Add "selected" class to clicked button
                button.classList.add("selected");
            }
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const numberOfQuestionsInput = document.getElementById("numberOfQuestionsInput");
            const maxQuestionsSpan = document.getElementById("maxQuestionsSpan");
            const submitButton = document.getElementById("submitButton");
            const placeholderText = numberOfQuestionsInput.getAttribute("placeholder");

            // Function to update the maximum number of questions span
            async function updateMaxQuestionsSpan() {
                // Get the selected subject and topic
                const subjectId = document.getElementById("subjectsDropdown").value;
                const topicId = document.getElementById("topicsDropdown").value;

                // Get the category of question
                const categoryOfQuestion = document.querySelector("select[name='CategoryOfQuestion']").value;

                // Calculate the maximum number of questions based on the category of question
                let maxQuestions;

                // Perform AJAX requests to get the question counts
                const subjectQuestionCount = await getQuestionCountBySubjectId(subjectId);
                const topicQuestionCount = await getQuestionCountByTopicId(topicId);

                console.log(topicQuestionCount);

                if (topicQuestionCount > 0) {
                    maxQuestions = topicQuestionCount;
                }

                else if (topicQuestionCount == 0) {
                    if (topicId == 0) {
                        maxQuestions = subjectQuestionCount;
                    }
                    else{
                        maxQuestions = 0;
                    }
                } 

                switch (categoryOfQuestion) {
                    case "0": // All
                        break;
                    case "1": // Not Answered Before
                        maxQuestions = await getNotAnsweredBeforeQuestionCount(subjectId, topicId);
                        break;
                    case "2": // Never Answered Correctly
                        maxQuestions = await getNeverAnsweredCorrectlyQuestionCount(subjectId, topicId);
                        break;
                }

                // Update the maximum number of questions span
                maxQuestionsSpan.textContent = `/${maxQuestions}`;
            }

            // Call the function initially
            updateMaxQuestionsSpan();

            function handleSubmit(event) {
                const maxQuestions = parseInt(maxQuestionsSpan.textContent.slice(1)); // Extract the maxQuestions value from the span
                const numberOfQuestions = parseInt(numberOfQuestionsInput.value); // Get the value entered in the NumberOfQuestions input field

                // Check if the entered number of questions exceeds the maximum
                if (numberOfQuestions > maxQuestions) {
                    // Prevent the default form submission action
                    event.preventDefault();
                    alert("Броя въведени въпроси надвишава този на наличните въпроси по зададените критерии!");
                }
            }
            // Add event listener for form submission
            submitButton.addEventListener("click", handleSubmit);

            // Add event listeners to update the span whenever the user interacts with the inputs
            numberOfQuestionsInput.addEventListener("input", updateMaxQuestionsSpan);
            document.getElementById("subjectsDropdown").addEventListener("change", updateMaxQuestionsSpan);
            document.getElementById("topicsDropdown").addEventListener("change", updateMaxQuestionsSpan);
            document.querySelector("select[name='CategoryOfQuestion']").addEventListener("change", updateMaxQuestionsSpan);

            // Add event listeners to handle placeholder text
            numberOfQuestionsInput.addEventListener("focus", function () {
                this.setAttribute("placeholder", "");
            });

            numberOfQuestionsInput.addEventListener("blur", function () {
                if (this.value === "") {
                    this.setAttribute("placeholder", placeholderText);
                }
            });

            // Function to fetch question count by subject id
            async function getQuestionCountBySubjectId(subjectId) {
                const response = await fetch(`../../../Question/OnGetQuestionCountBySubjectId?subjectId=${subjectId}`);
                const subjectQuestionCount = await response.json();
                return subjectQuestionCount;
            }

            // Function to fetch question count by topic id
            async function getQuestionCountByTopicId(topicId) {
                const response = await fetch(`../../../Question/OnGetQuestionCountByTopicId?topicId=${topicId}`);
                const topicQuestionCount = await response.json();
                return topicQuestionCount;
            }

            // Function to fetch count of questions not answered before
            async function getNotAnsweredBeforeQuestionCount(subjectId, topicId) {
                const response = await fetch(`../../../Question/OnGetNotAnsweredBeforeQuestionCount?subjectId=${subjectId}&topicId=${topicId}`);
                const notAnsweredBeforeQuestionCount = await response.json();
                return notAnsweredBeforeQuestionCount;
            }

            // Function to fetch count of questions never answered correctly
            async function getNeverAnsweredCorrectlyQuestionCount(subjectId, topicId) {
                const response = await fetch(`../../../Question/OnGetNeverAnsweredCorrectlyQuestionCount?subjectId=${subjectId}&topicId=${topicId}`);
                const neverAnsweredCorrectlyQuestionCount = await response.json();
                return neverAnsweredCorrectlyQuestionCount;
            }
        });
    </script>
}