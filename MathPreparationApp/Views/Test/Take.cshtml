@using Microsoft.AspNetCore.Mvc.TagHelpers
@model TestFormModel

@{
    ViewBag.Title = "Take Test";
    Layout = "_TestLayout";
}
<form id="testSubmissionForm" action="@Url.Action("Submit", "Test")" method="post">
    <div class="card">
        <div class="test-container">
            <div class="question-number">
                <h1>Въпрос 1/@Model.QuestionCount</h1>
            </div>
            <hr class="solid">
            <div class="pagination">
                @for (int i = 0; i < Model.QuestionCount; i++)
                {
                    <button type="button" class="pagination-button" data-question-index="@i">@Html.Raw(i + 1)</button>
                }
            </div>

            <div class="row mt-3">
                <div class="col-md-5 d-flex flex-column">
                    <div class="question">
                        <p style="font-size: 25px;">@Model.Questions.ToArray()[0].Name</p>
                        <hr class="solid">
                        <ul class="options">
                            <li>
                                <div>@Model.Questions.ToArray()[0].Option1</div>
                            </li>
                            <li>
                                <div>@Model.Questions.ToArray()[0].Option2</div>
                            </li>
                            <li>
                                <div>@Model.Questions.ToArray()[0].Option3</div>
                            </li>
                            <li>
                                <div>@Model.Questions.ToArray()[0].Option4</div>
                            </li>
                        </ul>
                    </div>

                    <div class="navigation-arrows mt-3" style="margin-top: 0;">
                        <button type="button" id="prev-question">&larr; Предишен</button>
                        <button type="button" id="next-question">Следващ &rarr;</button>
                    </div>
                </div>

                <div class="col-md-1"></div> <!-- Added for spacing -->

                <div class="col-md-5 d-flex align-items-start">
                    <div class="question-image-container">
                        @if (Model.Questions.ToArray()[0].ImageBytes != null)
                        {
                            <img class="question-image img-fluid" src="data:image/jpeg;base64,@Convert.ToBase64String(Model.Questions.ToArray()[0].ImageBytes)" alt="Question Image">
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        const testModel = @Json.Serialize(Model);

        document.addEventListener("DOMContentLoaded", function () {
            const paginationButtons = document.querySelectorAll(".pagination-button");
            const questionContainer = document.querySelector(".question");
            const questionNameElement = questionContainer.querySelector("p");
            const optionsListElement = questionContainer.querySelector(".options");
            const questionNumberElement = document.querySelector(".question-number h1");
            const previousQuestionButton = document.querySelector("#prev-question");
            const nextQuestionButton = document.querySelector("#next-question");
            const questionImageContainer = document.querySelector(".question-image-container");

            let btnIndex = 0;
            let selectedOptions = new Array(testModel.questions.length).fill(null);

            function toggleSelectedClass(index) {
                paginationButtons.forEach(button => {
                    if (button.getAttribute('data-question-index') == index) {
                        button.classList.add("selected");
                    }
                });
            }

            function updateQuestion(index) {
                let questionData = testModel.questions[index];

                // Update question name
                questionNameElement.textContent = questionData.name;

                // Update question options
                optionsListElement.innerHTML = '';
                for (let i = 0; i < 4; i++) {
                    let listItem = document.createElement("li");
                    let answerContainer = document.createElement("div");
                    let circle = document.createElement("div");
                    let optionText = document.createElement("div");

                    circle.textContent = String.fromCharCode(65 + i);
                    circle.classList.add("custom-option"); // Add custom-option class to circle

                    optionText.textContent = questionData["option" + (i + 1)];
                    optionText.classList.add("option-text"); // Add option-text class to option text

                    answerContainer.appendChild(circle);
                    answerContainer.appendChild(optionText);
                    answerContainer.classList.add("option-container"); // Add option-container class to answer container

                    let isSelected = selectedOptions[index] === i;

                    answerContainer.addEventListener("click", function () {
                        optionsListElement.querySelectorAll(".option-text").forEach(option => {
                            option.style.fontWeight = "normal";
                        });
                        optionsListElement.querySelectorAll(".custom-option").forEach(option => {
                            option.classList.remove("selected");
                        });

                        optionText.style.fontWeight = "bold"; // Bold the option text
                        circle.classList.add("selected"); // Add selected class to circle

                        selectedOptions[index] = i;
                        paginationButtons[index].classList.add("answered");
                    });

                    if (isSelected) {
                        optionText.style.fontWeight = "bold"; // Bold the option text
                        circle.classList.add("selected"); // Add selected class to circle
                    }

                    listItem.appendChild(answerContainer);
                    optionsListElement.appendChild(listItem);
                }

                // Update question number
                questionNumberElement.textContent = "Въпрос " + (index + 1) + "/" + testModel.questions.length;

                // Update question image
                questionImageContainer.innerHTML = ''; // Clear existing image
                if (questionData.imageBytes) {
                    const img = document.createElement("img");
                    img.className = "question-image img-fluid";
                    img.alt = "Question Image";
                    img.src = "data:image/jpeg;base64," + questionData.imageBytes;
                    questionImageContainer.appendChild(img);
                }

                toggleSelectedClass(index);
            }

            paginationButtons.forEach(button => {
                button.addEventListener("click", function () {
                    btnIndex = parseInt(button.getAttribute('data-question-index'));
                    updateQuestion(btnIndex);
                });
            });

            previousQuestionButton.addEventListener("click", function () {
                if (btnIndex > 0) {
                    btnIndex--;
                    updateQuestion(btnIndex);
                }
            });

            nextQuestionButton.addEventListener("click", function () {
                if (btnIndex < testModel.questions.length - 1) {
                    btnIndex++;
                    updateQuestion(btnIndex);
                } else if (btnIndex === testModel.questions.length - 1) {
                    let unansweredQuestions = selectedOptions.some(option => option === null);

                    if (unansweredQuestions) {
                        alert("Моля, отговорете на всички въпроси преди да предадете теста!");
                    } else {
                        let confirmSubmission = confirm("Искате ли да предадете теста?");

                        if (confirmSubmission) {
                            const form = document.getElementById('testSubmissionForm');
                            form.innerHTML = '';

                            let selections = {};
                            testModel.questions.forEach((question, index) => {
                                const questionId = question.id;
                                const selectedOptionIndex = selectedOptions[index];
                                selections[questionId] = selectedOptionIndex;
                            });

                            const input = document.createElement('input');
                            input.type = 'hidden';
                            input.name = 'selections';
                            input.value = JSON.stringify(selections);
                            form.appendChild(input);

                            form.submit();
                        } else {
                            updateQuestion(btnIndex);
                        }
                    }
                }
            });

            updateQuestion(0);
        });
    </script>
}